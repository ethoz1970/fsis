diff --git a/README.PhpRedisCluster.txt b/README.PhpRedisCluster.txt
new file mode 100644
index 0000000..8c61a3e
--- /dev/null
+++ b/README.PhpRedisCluster.txt
@@ -0,0 +1,3 @@
+See README.md file.
+
+See README.PhpRedis.txt file because PhpRedisCluster requires the same PHP Redis extension.
\ No newline at end of file
diff --git a/README.PredisCluster.txt b/README.PredisCluster.txt
new file mode 100644
index 0000000..60e6cd1
--- /dev/null
+++ b/README.PredisCluster.txt
@@ -0,0 +1,32 @@
+See README.md file.
+
+Sample configuration.
+
+settings.php
+
+  $settings['redis.connection']['interface'] = 'PredisCluster';
+  $settings['redis.connection']['hosts'] = ['tcp://0.0.0.1:6379', 'tcp://0.0.0.2:6379', 'tcp://0.0.0.3:6379'];
+  $settings['cache']['bins']['bootstrap'] = 'cache.backend.chainedfast';
+  $settings['cache']['bins']['discovery'] = 'cache.backend.chainedfast';
+  $settings['cache']['bins']['config'] = 'cache.backend.chainedfast';
+  $settings['cache']['default'] = 'cache.backend.redis';
+  $settings['container_yamls'][] = 'redis.services.yml';
+
+redis.services.yml
+
+  services:
+    cache_tags.invalidator.checksum:
+    class: Drupal\redis\Cache\RedisCacheTagsChecksum
+    arguments: ['@redis.factory']
+    tags:
+      - { name: cache_tags_invalidator }
+    lock:
+      class: Drupal\Core\Lock\LockBackendInterface
+      factory: ['@redis.lock.factory', get]
+    lock.persistent:
+      class: Drupal\Core\Lock\LockBackendInterface
+      factory: ['@redis.lock.factory', get]
+      arguments: [true]
+    flood:
+      class: Drupal\Core\Flood\FloodInterface
+      factory: ['@redis.flood.factory', get]
\ No newline at end of file
diff --git a/src/Cache/PhpRedisCluster.php b/src/Cache/PhpRedisCluster.php
new file mode 100644
index 0000000..f714184
--- /dev/null
+++ b/src/Cache/PhpRedisCluster.php
@@ -0,0 +1,101 @@
+<?php
+
+namespace Drupal\redis\Cache;
+
+use Drupal\Component\Serialization\SerializationInterface;
+use Drupal\Core\Cache\Cache;
+use Drupal\Core\Cache\CacheTagsChecksumInterface;
+
+/**
+ * PhpRedisCluster cache backend.
+ */
+class PhpRedisCluster extends CacheBase {
+
+  /**
+   * The client.
+   *
+   * @var \RedisCluster
+   */
+  protected $client;
+
+  /**
+   * Creates a PhpRedisCluster cache backend.
+   *
+   * @param string $bin
+   *   The cache bin for which the object is created.
+   * @param \RedisCluster $client
+   *   The cluster client.
+   * @param \Drupal\Core\Cache\CacheTagsChecksumInterface $checksum_provider
+   *   The cluster checksum.
+   * @param \Drupal\Component\Serialization\SerializationInterface $serializer
+   *   The serialization class to use.
+   */
+  public function __construct($bin, \RedisCluster $client, CacheTagsChecksumInterface $checksum_provider, SerializationInterface $serializer) {
+    parent::__construct($bin, $serializer);
+    $this->client = $client;
+    $this->checksumProvider = $checksum_provider;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getMultiple(&$cids, $allow_invalid = FALSE) {
+    // Avoid an error when there are no cache ids.
+    if (empty($cids)) {
+      return [];
+    }
+
+    $return = [];
+
+    // Build the list of keys to fetch.
+    foreach (array_map([$this, 'getKey'], $cids) as $key) {
+      $result[] = $this->client->hGetAll($key);
+    }
+
+    // Loop over the cid values to ensure numeric indexes.
+    foreach (array_values($cids) as $index => $key) {
+      // Check if a valid result was returned from Redis.
+      if (isset($result[$index]) && is_array($result[$index])) {
+        // Check expiration and invalidation and convert into an object.
+        $item = $this->expandEntry($result[$index], $allow_invalid);
+        if ($item) {
+          $return[$item->cid] = $item;
+        }
+      }
+    }
+
+    // Remove fetched cids from the list.
+    $cids = array_diff($cids, array_keys($return));
+
+    return $return;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function set($cid, $data, $expire = Cache::PERMANENT, array $tags = []) {
+
+    $ttl = $this->getExpiration($expire);
+
+    $key = $this->getKey($cid);
+
+    // If the item is already expired, delete it.
+    if ($ttl <= 0) {
+      $this->delete($key);
+    }
+
+    // Build the cache item and save it as a hash array.
+    $entry = $this->createEntryHash($cid, $data, $expire, $tags);
+    $this->client->hMset($key, $entry);
+    $this->client->expire($key, $ttl);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function doDeleteMultiple(array $cids) {
+    $keys = array_map([$this, 'getKey'], $cids);
+    $this->client->del($keys);
+  }
+
+}
\ No newline at end of file
diff --git a/src/Cache/PredisCluster.php b/src/Cache/PredisCluster.php
new file mode 100644
index 0000000..f67a608
--- /dev/null
+++ b/src/Cache/PredisCluster.php
@@ -0,0 +1,30 @@
+<?php
+
+namespace Drupal\redis\Cache;
+
+use Drupal\Component\Serialization\SerializationInterface;
+use Drupal\Core\Cache\CacheTagsChecksumInterface;
+use Predis\Client;
+
+/**
+ * Predis cache backend.
+ */
+class PredisCluster extends Predis {
+
+  /**
+   * PredisCluster constructor.
+   *
+   * @param string $bin
+   *   The bin.
+   * @param \Predis\Client $client
+   *   The client.
+   * @param \Drupal\Core\Cache\CacheTagsChecksumInterface $checksum_provider
+   *   The checksum provider.
+   * @param \Drupal\Component\Serialization\SerializationInterface $serializer
+   *   The serializer.
+   */
+  public function __construct($bin, Client $client, CacheTagsChecksumInterface $checksum_provider, SerializationInterface $serializer) {
+    parent::__construct($bin, $client, $checksum_provider, $serializer);
+  }
+
+}
\ No newline at end of file
diff --git a/src/Cache/RedisCacheTagsChecksum.php b/src/Cache/RedisCacheTagsChecksum.php
index 2da8a3e..88d7103 100644
--- a/src/Cache/RedisCacheTagsChecksum.php
+++ b/src/Cache/RedisCacheTagsChecksum.php
@@ -64,7 +64,12 @@ class RedisCacheTagsChecksum implements CacheTagsChecksumInterface, CacheTagsInv
       }
       $multi->exec();
     }
-    elseif ($this->clientType === 'Predis') {
+    elseif ($this->clientType === 'PhpRedisCluster') {
+      foreach ($keys as $key) {
+        $this->client->incr($key);
+      }
+    }
+    elseif ($this->clientType === 'Predis' || $this->clientType === 'PredisCluster') {
 
       $pipe = $this->client->pipeline();
       foreach ($keys as $key) {
diff --git a/src/Client/PhpRedisCluster.php b/src/Client/PhpRedisCluster.php
new file mode 100644
index 0000000..dccc248
--- /dev/null
+++ b/src/Client/PhpRedisCluster.php
@@ -0,0 +1,149 @@
+<?php
+
+namespace Drupal\redis\Client;
+
+use Drupal\Core\Site\Settings;
+use Drupal\redis\ClientInterface;
+
+/**
+ * PhpRedis client specific implementation.
+ */
+class PhpRedisCluster implements ClientInterface {
+
+  const DEFAULT_READ_TIMEOUT = 1.5;
+  const DEFAULT_TIMEOUT = 2;
+
+  /**
+   * The settings.
+   *
+   * @var array
+   */
+  private $settings;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getName() {
+    return 'PhpRedisCluster';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getClient($host = NULL, $port = NULL, $base = NULL, $password = NULL, $replicationHosts = [], $persistent = FALSE) {
+    // Get the redis connection settings because we need some
+    // client specific one.
+    $this->initSettings();
+
+    $client = new \RedisCluster($this->getClusterName(), $this->getSeeds(), $this->getTimeout(), $this->getReadTimeout(), $this->getPersistent(),  $this->getPassword(), $this->getContext());
+
+    return $client;
+  }
+
+  /**
+   * Initialize the settings.
+   */
+  private function initSettings() {
+    $this->settings = Settings::get('redis.connection', []);
+  }
+
+  /**
+   * Get the cluster name if configured.
+   *
+   * @return string|null
+   *   Cluster name or NULL if not configured.
+   */
+  private function getClusterName() {
+    if (isset($this->settings['cluster_name'])) {
+      return $this->settings['cluster_name'];
+    }
+
+    return NULL;
+  }
+
+  /**
+   * Get the seeds for the cluster connection.
+   *
+   * @return array
+   *   An array of hosts.
+   */
+  private function getSeeds() {
+    if (isset($this->settings['seeds'])) {
+      return $this->settings['seeds'];
+    }
+
+    return [implode(':', [$this->settings['host'], $this->settings['port']])];
+  }
+
+  /**
+   * Get the configured timeout.
+   *
+   * @return float
+   *   Configured timeout or self::DEFAULT_TIMEOUT
+   */
+  private function getTimeout() {
+    if (isset($this->settings['timeout'])) {
+      return $this->settings['timeout'];
+    }
+
+    return self::DEFAULT_TIMEOUT;
+  }
+
+  /**
+   * Get the configured read timeout.
+   *
+   * @return float
+   *   Configured timeout or self::DEFAULT_READ_TIMEOUT
+   */
+  private function getReadTimeout() {
+    if (isset($this->settings['read_timeout'])) {
+      return $this->settings['read_timeout'];
+    }
+
+    return self::DEFAULT_READ_TIMEOUT;
+  }
+
+  /**
+   * Get the persistent flag for the RedisCluster option.
+   *
+   * @return bool
+   *   Return the persistent
+   */
+  private function getPersistent() {
+    if (isset($this->settings['persistent'])) {
+      return $this->settings['persistent'];
+    }
+
+    return FALSE;
+  }
+
+  /**
+   * Get the cluster password if configured.
+   *
+   * @return string|null
+   *   Cluster password or NULL if not configured.
+   */
+  private function getPassword() {
+    if (isset($this->settings['password'])) {
+      return $this->settings['password'];
+    }
+
+    return NULL;
+  }
+
+  /**
+   * Get the cluster context.
+   *
+   * @return array|null
+   *   The cluster context or NULL.
+   */
+  private function getContext() {
+    $context = array_filter([
+      'scheme' => $this->settings['scheme'] ?? NULL,
+      'verify_peer' => $this->settings['verify_peer'] ?? NULL,
+    ]);
+
+    return $context ?: NULL;
+  }
+
+}
\ No newline at end of file
diff --git a/src/Client/PredisCluster.php b/src/Client/PredisCluster.php
new file mode 100644
index 0000000..210e09f
--- /dev/null
+++ b/src/Client/PredisCluster.php
@@ -0,0 +1,45 @@
+<?php
+
+namespace Drupal\redis\Client;
+
+use Drupal\Core\Site\Settings;
+use Drupal\redis\ClientInterface;
+use Predis\Client;
+
+/**
+ * PredisCluster client specific implementation.
+ */
+class PredisCluster implements ClientInterface {
+
+  const DEFAULT_READ_TIMEOUT = 1.5;
+  const DEFAULT_TIMEOUT = 2;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getClient($host = NULL, $port = NULL, $base = NULL, $password = NULL, $replicationHosts = [], $persistent = FALSE) {
+
+    $settings = Settings::get('redis.connection', []);
+    $parameters = $settings['hosts'];
+    $options = [
+      'cluster' => 'redis',
+      'parameters' => [
+        'scheme' => $this->settings['scheme'] ?? NULL,
+        'timeout' => $this->settings['timeout'] ?? self::DEFAULT_TIMEOUT,
+        'read_write_timeout' => $this->settings['read_timeout'] ?? self::DEFAULT_READ_TIMEOUT,
+      ],
+    ];
+
+    $client = new Client($parameters, $options);
+    return $client;
+
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getName() {
+    return 'PredisCluster';
+  }
+
+}
\ No newline at end of file
diff --git a/src/Controller/ReportController.php b/src/Controller/ReportController.php
index d6dd994..edd3904 100755
--- a/src/Controller/ReportController.php
+++ b/src/Controller/ReportController.php
@@ -2,12 +2,13 @@
 
 namespace Drupal\redis\Controller;
 
-use Predis\Client;
+use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Url;
 use Drupal\redis\ClientFactory;
 use Drupal\redis\RedisPrefixTrait;
+use Predis\Client;
 use Predis\Collection\Iterator\Keyspace;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -23,7 +24,7 @@ class ReportController extends ControllerBase {
   /**
    * The redis client.
    *
-   * @var \Redis|\Relay\Relay|\Predis\Client|false
+   * @var \Redis|\Relay\Relay|\Predis\Client|\RedisCluster|false
    */
   protected $redis;
 
@@ -88,7 +89,7 @@ class ReportController extends ControllerBase {
 
     $start = microtime(TRUE);
 
-    $info = $this->redis->info();
+    $info = $this->info();
 
     $prefix_length = strlen($this->getPrefix()) + 1;
 
@@ -168,20 +169,19 @@ class ReportController extends ControllerBase {
     }
 
     $end = microtime(TRUE);
-    $memory_config = $this->redis->config('get', 'maxmemory*');
 
-    if ($memory_config['maxmemory']) {
+    if ($info['maxmemory']) {
       $memory_value = $this->t('@used_memory / @max_memory (@used_percentage%), maxmemory policy: @policy', [
         '@used_memory' => $info['used_memory_human'] ?? $info['Memory']['used_memory_human'],
-        '@max_memory' => format_size($memory_config['maxmemory']),
-        '@used_percentage' => (int) ($info['used_memory'] ?? $info['Memory']['used_memory'] / $memory_config['maxmemory'] * 100),
-        '@policy' => $memory_config['maxmemory-policy'],
+        '@max_memory' => format_size($info['maxmemory']),
+        '@used_percentage' => (int) ($info['used_memory'] / $info['maxmemory'] * 100),
+        '@policy' => $info['maxmemory_policy'],
       ]);
     }
     else {
       $memory_value = $this->t('@used_memory / unlimited, maxmemory policy: @policy', [
-        '@used_memory' => $info['used_memory_human'] ?? $info['Memory']['used_memory_human'],
-        '@policy' => $memory_config['maxmemory-policy'],
+        '@used_memory' => $info['used_memory_human'],
+        '@policy' => $info['maxmemory_policy'],
       ]);
     }
 
@@ -192,15 +192,20 @@ class ReportController extends ControllerBase {
       ],
       'version' => [
         'title' => $this->t('Version'),
-        'value' => $info['redis_version'] ?? $info['Server']['redis_version'],
+        'value' => $info['redis_version'],
+      ],
+      'mode' => [
+        'title' => $this->t('Mode'),
+        'value' => Unicode::ucfirst($info['redis_mode']),
+
       ],
       'clients' => [
         'title' => $this->t('Connected clients'),
-        'value' => $info['connected_clients'] ?? $info['Clients']['connected_clients'],
+        'value' => $info['connected_clients'],
       ],
       'dbsize' => [
         'title' => $this->t('Keys'),
-        'value' => $this->redis->dbSize(),
+        'value' => $info['db_size'],
       ],
       'memory' => [
         'title' => $this->t('Memory'),
@@ -208,17 +213,17 @@ class ReportController extends ControllerBase {
       ],
       'uptime' => [
         'title' => $this->t('Uptime'),
-        'value' => $this->dateFormatter->formatInterval($info['uptime_in_seconds'] ?? $info['Server']['uptime_in_seconds']),
+        'value' => $this->dateFormatter->formatInterval($info['uptime_in_seconds']),
       ],
       'read_write' => [
         'title' => $this->t('Read/Write'),
         'value' => $this->t('@read read (@percent_read%), @write written (@percent_write%), @commands commands in @connections connections.', [
-          '@read' => format_size($info['total_net_output_bytes'] ?? $info['Stats']['total_net_output_bytes']),
-          '@percent_read' => round(100 / (($info['total_net_output_bytes'] ?? $info['Stats']['total_net_output_bytes']) + ($info['total_net_input_bytes'] ?? $info['Stats']['total_net_input_bytes'])) * ($info['total_net_output_bytes'] ?? $info['Stats']['total_net_output_bytes'])),
-          '@write' => format_size($info['total_net_input_bytes'] ?? $info['Stats']['total_net_input_bytes']),
-          '@percent_write' => round(100 / (($info['total_net_output_bytes'] ?? $info['Stats']['total_net_output_bytes']) + ($info['total_net_input_bytes'] ?? $info['Stats']['total_net_input_bytes'])) * ($info['total_net_input_bytes'] ?? $info['Stats']['total_net_input_bytes'])),
-          '@commands' => $info['total_commands_processed'] ?? $info['Stats']['total_commands_processed'],
-          '@connections' => $info['total_connections_received'] ?? $info['Stats']['total_connections_received'],
+          '@read' => format_size($info['total_net_output_bytes']),
+          '@percent_read' => round(100 / ($info['total_net_output_bytes'] + $info['total_net_input_bytes']) * ($info['total_net_output_bytes'])),
+          '@write' => format_size($info['total_net_input_bytes']),
+          '@percent_write' => round(100 / ($info['total_net_output_bytes'] + $info['total_net_input_bytes']) * ($info['total_net_input_bytes'])),
+          '@commands' => $info['total_commands_processed'],
+          '@connections' => $info['total_connections_received'],
         ]),
       ],
       'per_bin' => [
@@ -244,12 +249,18 @@ class ReportController extends ControllerBase {
       ],
       'time_spent' => [
         'title' => $this->t('Time spent'),
-        'value' => ['#markup' => $this->t('@count keys in @time seconds.', ['@count' => $i, '@time' => round(($end - $start), 4)])],
+        'value' => [
+          '#markup' => $this->t('@count keys in @time seconds.', [
+            '@count' => $i,
+            '@time' => round(($end - $start), 4),
+          ]),
+        ],
+
       ],
     ];
 
     // Warnings/hints.
-    if ($memory_config['maxmemory-policy'] == 'noeviction') {
+    if ($info['maxmemory_policy'] == 'noeviction') {
       $redis_url = Url::fromUri('https://redis.io/topics/lru-cache', [
         'fragment' => 'eviction-policies',
         'attributes' => [
@@ -316,9 +327,63 @@ class ReportController extends ControllerBase {
         yield from $keys;
       }
     }
+    elseif ($this->redis instanceof \RedisCluster) {
+      $master = current($this->redis->_masters());
+      while ($keys = $this->redis->scan($it, $master, $this->getPrefix() . '*', $count)) {
+        yield from $keys;
+      }
+    }
     elseif ($this->redis instanceof Client) {
       yield from new Keyspace($this->redis, $match, $count);
     }
   }
 
+  /**
+   * Wrapper to get various statistical information from Redis.
+   *
+   * @return array
+   *   Redis info.
+   */
+  protected function info() {
+    $normalized_info = [];
+    if ($this->redis instanceof \RedisCluster) {
+      $master = current($this->redis->_masters());
+      $info = $this->redis->info($master);
+    }
+    else {
+      $info = $this->redis->info();
+    }
+
+    $normalized_info['redis_version'] = $info['redis_version'] ?? $info['Server']['redis_version'];
+    $normalized_info['redis_mode'] = $info['redis_mode'] ?? $info['Server']['redis_mode'];
+    $normalized_info['connected_clients'] = $info['connected_clients'] ?? $info['Clients']['connected_clients'];
+    if ($this->redis instanceof \RedisCluster) {
+      $master = current($this->redis->_masters());
+      $normalized_info['db_size'] = $this->redis->dbSize($master);
+    }
+    else {
+      $normalized_info['db_size'] = $this->redis->dbSize();
+    }
+    $normalized_info['used_memory'] = $info['used_memory'] ?? $info['Memory']['used_memory'];
+    $normalized_info['used_memory_human'] = $info['used_memory_human'] ?? $info['Memory']['used_memory_human'];
+
+    if (empty($info['maxmemory_policy'])) {
+      $memory_config = $this->redis->config('get', 'maxmemory*');
+      $normalized_info['maxmemory_policy'] = $memory_config['maxmemory-policy'];
+      $normalized_info['maxmemory'] = $memory_config['maxmemory'];
+    }
+    else {
+      $normalized_info['maxmemory_policy'] = $info['maxmemory_policy'];
+      $normalized_info['maxmemory'] = $info['maxmemory'];
+    }
+
+    $normalized_info['uptime_in_seconds'] = $info['uptime_in_seconds'] ?? $info['Server']['uptime_in_seconds'];
+    $normalized_info['total_net_output_bytes'] = $info['total_net_output_bytes'] ?? $info['Stats']['total_net_output_bytes'];
+    $normalized_info['total_net_input_bytes'] = $info['total_net_input_bytes'] ?? $info['Stats']['total_net_input_bytes'];
+    $normalized_info['total_commands_processed'] = $info['total_commands_processed'] ?? $info['Stats']['total_commands_processed'];
+    $normalized_info['total_connections_received'] = $info['total_connections_received'] ?? $info['Stats']['total_connections_received'];
+
+    return $normalized_info;
+  }
+
 }
diff --git a/src/Flood/PhpRedisCluster.php b/src/Flood/PhpRedisCluster.php
new file mode 100644
index 0000000..848440b
--- /dev/null
+++ b/src/Flood/PhpRedisCluster.php
@@ -0,0 +1,13 @@
+<?php
+
+namespace Drupal\redis\Flood;
+
+use Drupal\Core\Flood\FloodInterface;
+
+/**
+ * Defines the PhpRedisCluster flood backend.
+ */
+class PhpRedisCluster extends PhpRedis implements FloodInterface {
+  // Just fall back to PhpRedis implementation for now because at the moment
+  // it is 100% overlapping at the moment.
+}
\ No newline at end of file
diff --git a/src/Flood/PredisCluster.php b/src/Flood/PredisCluster.php
new file mode 100644
index 0000000..2b7812b
--- /dev/null
+++ b/src/Flood/PredisCluster.php
@@ -0,0 +1,145 @@
+<?php
+
+namespace Drupal\redis\Lock;
+
+use Drupal\Core\Lock\LockBackendAbstract;
+use Drupal\redis\ClientFactory;
+use Drupal\redis\RedisPrefixTrait;
+
+/**
+ * RedisCluster lock backend implementation.
+ */
+class PhpRedisCluster extends LockBackendAbstract {
+
+  use RedisPrefixTrait;
+
+  /**
+   * The client.
+   *
+   * @var \RedisCluster
+   */
+  protected $client;
+
+  /**
+   * Creates a PhpRedisCluster cache backend.
+   *
+   * @param \Drupal\redis\ClientFactory $factory
+   *   The ClientFactory object to initialize the client.
+   */
+  public function __construct(ClientFactory $factory) {
+    $this->client = $factory->getClient();
+    // __destruct() is causing problems with garbage collections, register a
+    // shutdown function instead.
+    drupal_register_shutdown_function([$this, 'releaseAll']);
+  }
+
+  /**
+   * Generate a redis key name for the current lock name.
+   *
+   * @param string $name
+   *   Lock name.
+   *
+   * @return string
+   *   The redis key for the given lock.
+   */
+  protected function getKey($name) {
+    return $this->getPrefix() . ':lock:' . $name;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function acquire($name, $timeout = 30.0) {
+    $key = $this->getKey($name);
+    $id  = $this->getLockId();
+
+    // Insure that the timeout is at least 1 ms.
+    $timeout = max($timeout, 0.001);
+
+    // If we already have the lock, check for its owner and attempt a new EXPIRE
+    // command on it.
+    if (isset($this->locks[$name])) {
+
+      // Create a new transaction, for atomicity.
+      $this->client->watch($key);
+
+      // Global tells us we are the owner, but in real life it could have
+      // expired and another process could have taken it, check that.
+      if ($this->client->get($key) != $id) {
+        // Explicit UNWATCH we are not going to run the MULTI/EXEC block.
+        $this->client->unwatch();
+        unset($this->locks[$name]);
+        return FALSE;
+      }
+
+      $result = $this->client->psetex($key, (int) ($timeout * 1000), $id);
+
+      // If the set failed, someone else wrote the key, we failed to acquire
+      // the lock.
+      if (FALSE === $result) {
+        unset($this->locks[$name]);
+        // Explicit transaction release which also frees the WATCH'ed key.
+        $this->client->discard();
+        return FALSE;
+      }
+
+      return ($this->locks[$name] = TRUE);
+    }
+    else {
+      // Use a SET with microsecond expiration and the NX flag, which will only
+      // succeed if the key does not exist yet.
+      $result = $this->client->set($key, $id, ['nx', 'px' => (int) ($timeout * 1000)]);
+
+      // If the result is FALSE, we failed to acquire the lock.
+      if (FALSE === $result) {
+        return FALSE;
+      }
+
+      // Register the lock.
+      return ($this->locks[$name] = TRUE);
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function lockMayBeAvailable($name) {
+    $key   = $this->getKey($name);
+    $value = $this->client->get($key);
+    return FALSE === $value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function release($name) {
+    $key = $this->getKey($name);
+    $id  = $this->getLockId();
+
+    unset($this->locks[$name]);
+
+    // Ensure the lock deletion is an atomic transaction. If another thread
+    // manages to removes all lock, we can not alter it anymore else we will
+    // release the lock for the other thread and cause race conditions.
+    $this->client->watch($key);
+
+    if ($this->client->get($key) == $id) {
+      $this->client->del($key);
+    }
+    else {
+      $this->client->unwatch();
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function releaseAll($lock_id = NULL) {
+    // We can afford to deal with a slow algorithm here, this should not happen
+    // on normal run because we should have removed manually all our locks.
+    foreach ($this->locks as $name => $foo) {
+      $this->release($name);
+    }
+  }
+
+}
\ No newline at end of file
diff --git a/src/Lock/PhpRedisCluster.php b/src/Lock/PhpRedisCluster.php
new file mode 100644
index 0000000..2b7812b
--- /dev/null
+++ b/src/Lock/PhpRedisCluster.php
@@ -0,0 +1,145 @@
+<?php
+
+namespace Drupal\redis\Lock;
+
+use Drupal\Core\Lock\LockBackendAbstract;
+use Drupal\redis\ClientFactory;
+use Drupal\redis\RedisPrefixTrait;
+
+/**
+ * RedisCluster lock backend implementation.
+ */
+class PhpRedisCluster extends LockBackendAbstract {
+
+  use RedisPrefixTrait;
+
+  /**
+   * The client.
+   *
+   * @var \RedisCluster
+   */
+  protected $client;
+
+  /**
+   * Creates a PhpRedisCluster cache backend.
+   *
+   * @param \Drupal\redis\ClientFactory $factory
+   *   The ClientFactory object to initialize the client.
+   */
+  public function __construct(ClientFactory $factory) {
+    $this->client = $factory->getClient();
+    // __destruct() is causing problems with garbage collections, register a
+    // shutdown function instead.
+    drupal_register_shutdown_function([$this, 'releaseAll']);
+  }
+
+  /**
+   * Generate a redis key name for the current lock name.
+   *
+   * @param string $name
+   *   Lock name.
+   *
+   * @return string
+   *   The redis key for the given lock.
+   */
+  protected function getKey($name) {
+    return $this->getPrefix() . ':lock:' . $name;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function acquire($name, $timeout = 30.0) {
+    $key = $this->getKey($name);
+    $id  = $this->getLockId();
+
+    // Insure that the timeout is at least 1 ms.
+    $timeout = max($timeout, 0.001);
+
+    // If we already have the lock, check for its owner and attempt a new EXPIRE
+    // command on it.
+    if (isset($this->locks[$name])) {
+
+      // Create a new transaction, for atomicity.
+      $this->client->watch($key);
+
+      // Global tells us we are the owner, but in real life it could have
+      // expired and another process could have taken it, check that.
+      if ($this->client->get($key) != $id) {
+        // Explicit UNWATCH we are not going to run the MULTI/EXEC block.
+        $this->client->unwatch();
+        unset($this->locks[$name]);
+        return FALSE;
+      }
+
+      $result = $this->client->psetex($key, (int) ($timeout * 1000), $id);
+
+      // If the set failed, someone else wrote the key, we failed to acquire
+      // the lock.
+      if (FALSE === $result) {
+        unset($this->locks[$name]);
+        // Explicit transaction release which also frees the WATCH'ed key.
+        $this->client->discard();
+        return FALSE;
+      }
+
+      return ($this->locks[$name] = TRUE);
+    }
+    else {
+      // Use a SET with microsecond expiration and the NX flag, which will only
+      // succeed if the key does not exist yet.
+      $result = $this->client->set($key, $id, ['nx', 'px' => (int) ($timeout * 1000)]);
+
+      // If the result is FALSE, we failed to acquire the lock.
+      if (FALSE === $result) {
+        return FALSE;
+      }
+
+      // Register the lock.
+      return ($this->locks[$name] = TRUE);
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function lockMayBeAvailable($name) {
+    $key   = $this->getKey($name);
+    $value = $this->client->get($key);
+    return FALSE === $value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function release($name) {
+    $key = $this->getKey($name);
+    $id  = $this->getLockId();
+
+    unset($this->locks[$name]);
+
+    // Ensure the lock deletion is an atomic transaction. If another thread
+    // manages to removes all lock, we can not alter it anymore else we will
+    // release the lock for the other thread and cause race conditions.
+    $this->client->watch($key);
+
+    if ($this->client->get($key) == $id) {
+      $this->client->del($key);
+    }
+    else {
+      $this->client->unwatch();
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function releaseAll($lock_id = NULL) {
+    // We can afford to deal with a slow algorithm here, this should not happen
+    // on normal run because we should have removed manually all our locks.
+    foreach ($this->locks as $name => $foo) {
+      $this->release($name);
+    }
+  }
+
+}
\ No newline at end of file
diff --git a/src/Lock/PredisCluster.php b/src/Lock/PredisCluster.php
new file mode 100644
index 0000000..d5ad6d2
--- /dev/null
+++ b/src/Lock/PredisCluster.php
@@ -0,0 +1,10 @@
+<?php
+
+namespace Drupal\redis\Lock;
+
+/**
+ * Predis lock backend implementation.
+ */
+class PredisCluster extends Predis {
+
+}
\ No newline at end of file
diff --git a/src/PersistentLock/PhpRedisCluster.php b/src/PersistentLock/PhpRedisCluster.php
new file mode 100644
index 0000000..4598385
--- /dev/null
+++ b/src/PersistentLock/PhpRedisCluster.php
@@ -0,0 +1,30 @@
+<?php
+
+namespace Drupal\redis\PersistentLock;
+
+use Drupal\redis\Lock\PhpRedisCluster as ClusterLock;
+use Drupal\redis\ClientFactory;
+
+/**
+ * PhpRedisCluster persistent lock backend.
+ */
+class PhpRedisCluster extends ClusterLock {
+
+  /**
+   * Creates a PhpRedisCluster persistent lock backend.
+   *
+   * @param \Drupal\redis\ClientFactory $factory
+   *   The ClientFactory object to initialize the client.
+   */
+  public function __construct(ClientFactory $factory) {
+    // Do not call the parent constructor to avoid registering a shutdown
+    // function that releases all the locks at the end of a request.
+    $this->client = $factory->getClient();
+    // Set the lockId to a fixed string to make the lock ID the same across
+    // multiple requests. The lock ID is used as a page token to relate all the
+    // locks set during a request to each other.
+    // @see \Drupal\Core\Lock\LockBackendInterface::getLockId()
+    $this->lockId = 'persistent';
+  }
+
+}
\ No newline at end of file
diff --git a/src/PersistentLock/PredisCluster.php b/src/PersistentLock/PredisCluster.php
new file mode 100644
index 0000000..6dcc41a
--- /dev/null
+++ b/src/PersistentLock/PredisCluster.php
@@ -0,0 +1,10 @@
+<?php
+
+namespace Drupal\redis\PersistentLock;
+
+/**
+ * Predis persistent lock backend.
+ */
+class PredisCluster extends Predis {
+
+}
\ No newline at end of file
